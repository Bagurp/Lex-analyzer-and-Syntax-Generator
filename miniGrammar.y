%{
#include <stdio.h>
#include <stdlib.h>

extern FILE *fp;
extern int yylineno;
extern  char *yytext;
extern FILE *yyin;
extern FILE *yyout;
%}
 
%token INT FLOAT CHAR DOUBLE VOID
%token FOR WHILE TRUE FALSE
%token IF ELSE WRITE  READ ENDIF
%token STRUCT 
%token NUM IDENT
%token INCLUDE LOOP ENDLOOP
%token DOT OF ARRAY PROGRAM AND THEN BE EN

%token DO
%left AND OR
%left LE GE EQ NE LT GT
%right ASSIGN
%%


/* Assignment block */
Prgm:PROGRAM IDENT ';' Declaration_Statements Bgprgm
    ;
    
Declaration_Statements: Declaration Declaration_Statements
                        | Declaration
                        ;
    
/* Declaration block */
Declaration: variables ':' Type ';' 
	| Assignment ';'  	
	| ArrayUsage ';'	
	| variables ':' ARRAY dimension OF Type ';'   
	;    

Bgprgm:BE StmtList EN
;
Assignment: IDENT ASSIGN expression
	| ArrayUsage ASSIGN expression
	;

expression: additive_expression      
            ;
variables: 
           IDENT ',' variables
           | ArrayUsage ',' variables
           | IDENT
           | ArrayUsage
           ;

dimension : '(' expression ')' dimension
     | '(' expression ')'
     ;

/* Array Usage */
ArrayUsage : 
        IDENT dimension 
	;


	
StmtList:	StmtList Stmt
	| Stmt
	;
Stmt:	WhileStmt
	| IfStmt
	| PrintFunc
        | ReadFunc
    | Assignment ';'
	| ';'
	;

/* Type Identifier block */
Type:	INT 
	| FLOAT
	| CHAR
	| DOUBLE
	| VOID
	;

/* Loop Blocks */ 
WhileStmt:
         WHILE conditional_expression LOOP StmtList ENDLOOP ';'
	;

/* IfStmt Block */
IfStmt : 
       IF conditional_expression THEN StmtList ELSE StmtList ENDIF ';'
       | IF conditional_expression THEN StmtList ENDIF ';'
	;

/* Print Function */
PrintFunc : WRITE variables ';'

	;
/*Read Function */
ReadFunc : READ variables ';'
         ;


conditional_expression
	: logical_or_expression

logical_or_expression
	: logical_and_expression
	| logical_or_expression OR logical_and_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression AND inclusive_or_expression
	;
	
inclusive_or_expression
	: exclusive_or_expression
	| TRUE
	| FALSE
	;
	
exclusive_or_expression
	: and_expression
	;
	
and_expression
	: equality_expression
	;
	
equality_expression
	: relational_expression
	| equality_expression EQ relational_expression
	| equality_expression NE relational_expression
	;
	
relational_expression
	: additive_expression
	| relational_expression LT additive_expression
	| relational_expression GT additive_expression
	| relational_expression LE additive_expression
	| relational_expression GE additive_expression
	;
	
additive_expression
	: multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression
	;

multiplicative_expression
	: primary_expression
	| multiplicative_expression '*' primary_expression
	| multiplicative_expression '/' primary_expression
	| multiplicative_expression '%' primary_expression
	;

primary_expression
	: IDENT
	| NUM
	| ArrayUsage
	| '(' additive_expression ')'
	;
	


	
%%
#include<ctype.h>
int errorcount=0;

int main(int argc, char *argv[])
{
	yyin = fopen(argv[1], "r");
	printf("\n\t\t Compiler Design Project");
	printf("\n\t\t Compiler from \" miniL \" Language");
	printf("\n\nName: Pranav Dakshinamurthy\t\t ID : K00380859 SEC: 001");
	printf("\nName: Sreenivasa S.B. Ayyalasomayajula \t ID : K00380185 SEC: 005");
	printf("\nName: Pramukh Dayananda Bagur \t\t ID : K00405790 SEC: 001");
	printf("\nName: Prathap Uday Shetty \t\t ID : K00381754 SEC: 001");
	printf("\n\nThe tokens generated by Lexical Analyzer:\n");
    yyparse();
    if(errorcount==0)
    printf("\n\n\nParsing is sucessful by Syntax Analyzer\n");
    else
	printf("\n\n\nParsing failed by Syntax Analyzer\n");
	
	fclose(yyin);
    return 0;
}
         
yyerror(char *s) {
	printf("\n\n%d : %s %s\n", yylineno, s, yytext );
	errorcount++;
}         

